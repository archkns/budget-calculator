"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { InteractiveGantt } from '@/components/ui/interactive-gantt'
import { Calculator, Plus, Edit, Trash2, FileText, TrendingUp, TrendingDown, CalendarIcon, BarChart3 } from 'lucide-react'
import { format, addDays, isWeekend, differenceInDays } from 'date-fns'
import { toast } from 'sonner'
import Link from 'next/link'

interface ProjectAssignment {
  id: number
  name: string
  role: string
  tier: string
  dailyRate: number
  daysAllocated: number
  bufferDays: number
  totalMandays: number
  totalPrice: number
  startDate: Date
  endDate: Date
}

interface Holiday {
  id: number
  name: string
  date: Date
  type: 'public' | 'company'
  project_id?: number
}

interface ProjectSummary {
  subtotal: number
  additionalCost: number
  cost: number
  proposedPrice: number
  roi: number
  margin: number
}

interface GanttTask {
  id: number
  name: string
  role: string
  startDate: Date
  endDate: Date
  type: 'execution' | 'buffer'
  color: string
  assigneeId: number
}

export default function ProjectWorkspace() {
  const [project, setProject] = useState({
    id: 1,
    name: 'E-commerce Platform Redesign',
    client: 'TechCorp Ltd.',
    currency: { code: 'THB', symbol: 'à¸¿' },
    hoursPerDay: 7,
    taxEnabled: false,
    taxPercentage: 7,
    proposedPrice: 3000000,
    startDate: new Date('2025-09-15'),
    executionDays: 45,
    bufferDays: 5,
    finalDays: 50
  })

  const [assignments, setAssignments] = useState<ProjectAssignment[]>([
    {
      id: 1,
      name: 'Sarah Johnson',
      role: 'Experience Designer (UX/UI)',
      tier: 'Team Lead',
      dailyRate: 18000,
      daysAllocated: 20,
      bufferDays: 3,
      totalMandays: 23,
      totalPrice: 414000,
      startDate: new Date('2025-09-15'),
      endDate: new Date('2025-10-16')
    },
    {
      id: 2,
      name: 'John Smith',
      role: 'Frontend Dev',
      tier: 'Senior',
      dailyRate: 14000,
      daysAllocated: 35,
      bufferDays: 5,
      totalMandays: 40,
      totalPrice: 560000,
      startDate: new Date('2025-09-15'),
      endDate: new Date('2025-11-11')
    },
    {
      id: 3,
      name: 'Mike Chen',
      role: 'Backend Dev',
      tier: 'Senior',
      dailyRate: 14000,
      daysAllocated: 40,
      bufferDays: 6,
      totalMandays: 46,
      totalPrice: 644000,
      startDate: new Date('2025-09-15'),
      endDate: new Date('2025-11-19')
    }
  ])

  const [holidays, setHolidays] = useState<Holiday[]>([])
  const [loading, setLoading] = useState(false)
  const [newHoliday, setNewHoliday] = useState({
    name: '',
    date: new Date(),
    type: 'public' as 'public' | 'company'
  })
  const [showAddHoliday, setShowAddHoliday] = useState(false)

  // Fetch holidays from database
  useEffect(() => {
    fetchHolidays()
  }, [])

  const fetchHolidays = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/holidays?project_id=${project.id}`)
      if (response.ok) {
        const data = await response.json()
        setHolidays(data.map((h: any) => ({
          ...h,
          date: new Date(h.date)
        })))
      }
    } catch (error) {
      console.error('Error fetching holidays:', error)
      toast.error('Failed to fetch holidays')
    } finally {
      setLoading(false)
    }
  }

  const addHoliday = async () => {
    try {
      const response = await fetch('/api/holidays', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: newHoliday.name,
          date: format(newHoliday.date, 'yyyy-MM-dd'),
          type: newHoliday.type,
          project_id: newHoliday.type === 'company' ? project.id : null
        })
      })

      if (response.ok) {
        await fetchHolidays()
        setNewHoliday({ name: '', date: new Date(), type: 'public' })
        setShowAddHoliday(false)
        toast.success('Holiday added successfully')
      } else {
        toast.error('Failed to add holiday')
      }
    } catch (error) {
      console.error('Error adding holiday:', error)
      toast.error('Failed to add holiday')
    }
  }

  const deleteHoliday = async (id: number) => {
    try {
      const response = await fetch(`/api/holidays?id=${id}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        await fetchHolidays()
        toast.success('Holiday deleted successfully')
      } else {
        toast.error('Failed to delete holiday')
      }
    } catch (error) {
      console.error('Error deleting holiday:', error)
      toast.error('Failed to delete holiday')
    }
  }

  const calculateWorkdays = (startDate: Date, days: number, holidays: Holiday[]): Date => {
    let currentDate = new Date(startDate)
    let workdaysAdded = 0
    
    while (workdaysAdded < days) {
      currentDate = addDays(currentDate, 1)
      
      // Skip weekends and holidays
      if (!isWeekend(currentDate) && !holidays.some(h => 
        format(h.date, 'yyyy-MM-dd') === format(currentDate, 'yyyy-MM-dd')
      )) {
        workdaysAdded++
      }
    }
    
    return currentDate
  }

  const calculateProjectDates = () => {
    const totalExecutionDays = Math.max(...assignments.map(a => a.daysAllocated))
    const totalBufferDays = Math.max(...assignments.map(a => a.bufferDays))
    
    const executionEndDate = calculateWorkdays(project.startDate, totalExecutionDays, holidays)
    const projectEndDate = calculateWorkdays(executionEndDate, totalBufferDays, holidays)
    
    return {
      executionEndDate,
      projectEndDate,
      totalExecutionDays,
      totalBufferDays
    }
  }

  const projectDates = calculateProjectDates()

  const calculateSummary = (): ProjectSummary => {
    const subtotal = assignments.reduce((sum, assignment) => sum + (assignment.dailyRate * assignment.daysAllocated), 0)
    const additionalCost = 98700 // Fixed additional cost
    const cost = subtotal + additionalCost
    const proposedPrice = project.proposedPrice
    
    const roi = cost > 0 ? ((proposedPrice - cost) / cost) * 100 : 0
    const margin = proposedPrice > 0 ? ((proposedPrice - cost) / proposedPrice) * 100 : 0

    return { subtotal, additionalCost, cost, proposedPrice, roi, margin }
  }

  const summary = calculateSummary()

  const formatCurrency = (amount: number) => {
    return `${project.currency.symbol}${amount.toLocaleString()}`
  }

  const formatPercentage = (percentage: number) => {
    return `${percentage.toFixed(2)}%`
  }

  const updateAssignment = (id: number, field: string, value: string | number) => {
    setAssignments(prev => prev.map(assignment => {
      if (assignment.id === id) {
        const updated = { ...assignment, [field]: value }
        
        // Recalculate total mandays and total price
        if (['daysAllocated', 'bufferDays'].includes(field)) {
          updated.totalMandays = updated.daysAllocated + updated.bufferDays
          updated.totalPrice = updated.dailyRate * updated.totalMandays
          
          // Update dates
          const executionEnd = calculateWorkdays(updated.startDate, updated.daysAllocated, holidays)
          updated.endDate = calculateWorkdays(executionEnd, updated.bufferDays, holidays)
        } else if (field === 'dailyRate') {
          updated.totalPrice = updated.dailyRate * updated.totalMandays
        }
        
        return updated
      }
      return assignment
    }))
  }

  const handleEditAssignment = (id: number) => {
    console.log('Edit assignment:', id)
  }

  const handleDeleteAssignment = (id: number) => {
    setAssignments(prev => prev.filter(assignment => assignment.id !== id))
  }

  // Generate Gantt tasks
  const generateGanttTasks = (): GanttTask[] => {
    const tasks: GanttTask[] = []
    
    assignments.forEach(assignment => {
      // Execution phase
      const executionEnd = calculateWorkdays(assignment.startDate, assignment.daysAllocated, holidays)
      tasks.push({
        id: assignment.id * 2 - 1,
        name: assignment.name,
        role: assignment.role,
        startDate: assignment.startDate,
        endDate: executionEnd,
        type: 'execution',
        color: '#3b82f6', // Blue
        assigneeId: assignment.id
      })
      
      // Buffer phase
      if (assignment.bufferDays > 0) {
        const bufferEnd = calculateWorkdays(executionEnd, assignment.bufferDays, holidays)
        tasks.push({
          id: assignment.id * 2,
          name: assignment.name,
          role: assignment.role,
          startDate: executionEnd,
          endDate: bufferEnd,
          type: 'buffer',
          color: '#f97316', // Orange
          assigneeId: assignment.id
        })
      }
    })
    
    return tasks
  }

  const handleTaskUpdate = (taskId: number, startDate: Date, endDate: Date) => {
    const assigneeId = Math.ceil(taskId / 2)
    const isBuffer = taskId % 2 === 0
    
    setAssignments(prev => prev.map(assignment => {
      if (assignment.id === assigneeId) {
        const updated = { ...assignment }
        
        if (isBuffer) {
          // Update buffer phase
          const newBufferDays = differenceInDays(endDate, startDate) + 1
          updated.bufferDays = newBufferDays
          updated.totalMandays = updated.daysAllocated + newBufferDays
          updated.totalPrice = updated.dailyRate * updated.totalMandays
        } else {
          // Update execution phase
          updated.startDate = startDate
          const newExecutionDays = differenceInDays(endDate, startDate) + 1
          updated.daysAllocated = newExecutionDays
          updated.totalMandays = newExecutionDays + updated.bufferDays
          updated.totalPrice = updated.dailyRate * updated.totalMandays
        }
        
        return updated
      }
      return assignment
    }))
  }

  const handleTaskResize = (taskId: number, newDuration: number) => {
    const assigneeId = Math.ceil(taskId / 2)
    const isBuffer = taskId % 2 === 0
    
    setAssignments(prev => prev.map(assignment => {
      if (assignment.id === assigneeId) {
        const updated = { ...assignment }
        
        if (isBuffer) {
          updated.bufferDays = newDuration
        } else {
          updated.daysAllocated = newDuration
        }
        
        updated.totalMandays = updated.daysAllocated + updated.bufferDays
        updated.totalPrice = updated.dailyRate * updated.totalMandays
        
        return updated
      }
      return assignment
    }))
  }

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <header className="bg-white border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Link href="/" className="flex items-center space-x-2">
                <Calculator className="h-8 w-8 text-blue-600" />
                <span className="text-2xl font-bold text-slate-900">Budget Calculator</span>
              </Link>
              <span className="text-slate-400">/</span>
              <span className="text-slate-600">{project.name}</span>
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline">Save Template</Button>
              <Button variant="outline">Export</Button>
              <Button>Save Project</Button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Project Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900">{project.name}</h1>
          <p className="text-slate-600 mt-2">Client: {project.client}</p>
          <p className="text-slate-500 text-sm mt-1">
            {format(project.startDate, 'MMM dd, yyyy')} - {format(projectDates.projectEndDate, 'MMM dd, yyyy')}
          </p>
        </div>

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Subtotal</CardTitle>
              <Calculator className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatCurrency(summary.subtotal)}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Cost</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatCurrency(summary.cost)}</div>
              <p className="text-xs text-muted-foreground">
                {formatCurrency(summary.subtotal)} + {formatCurrency(summary.additionalCost)}
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">ROI</CardTitle>
              {summary.roi >= 0 ? (
                <TrendingUp className="h-4 w-4 text-green-600" />
              ) : (
                <TrendingDown className="h-4 w-4 text-red-600" />
              )}
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${summary.roi >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                {formatPercentage(summary.roi)}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Margin</CardTitle>
              {summary.margin >= 0 ? (
                <TrendingUp className="h-4 w-4 text-green-600" />
              ) : (
                <TrendingDown className="h-4 w-4 text-red-600" />
              )}
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${summary.margin >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                {formatPercentage(summary.margin)}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Tabs */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList>
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="gantt">Gantt Chart</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Project Settings */}
              <Card>
                <CardHeader>
                  <CardTitle>Project Settings</CardTitle>
                  <CardDescription>Configure project parameters and pricing</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="currency">Currency</Label>
                      <Select value={project.currency.code}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="THB">THB (à¸¿)</SelectItem>
                          <SelectItem value="USD">USD ($)</SelectItem>
                          <SelectItem value="EUR">EUR (â¬)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="hoursPerDay">Hours/Day</Label>
                      <Input
                        id="hoursPerDay"
                        type="number"
                        value={project.hoursPerDay}
                        onChange={(e) => setProject(prev => ({ ...prev, hoursPerDay: parseInt(e.target.value) }))}
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="proposedPrice">Proposed Price</Label>
                    <Input
                      id="proposedPrice"
                      type="number"
                      value={project.proposedPrice}
                      onChange={(e) => setProject(prev => ({ ...prev, proposedPrice: parseFloat(e.target.value) }))}
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Day Configuration */}
              <Card>
                <CardHeader>
                  <CardTitle>Day Configuration</CardTitle>
                  <CardDescription>Set project timeline and dates</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Project Start Date</Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button variant="outline" className="w-full justify-start text-left font-normal">
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {format(project.startDate, 'PPP')}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={project.startDate}
                          onSelect={(date) => date && setProject(prev => ({ ...prev, startDate: date }))}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label>Execution End</Label>
                      <Input
                        value={format(projectDates.executionEndDate, 'MMM dd, yyyy')}
                        disabled
                        className="bg-slate-50"
                      />
                    </div>
                    
                    <div>
                      <Label>Project End</Label>
                      <Input
                        value={format(projectDates.projectEndDate, 'MMM dd, yyyy')}
                        disabled
                        className="bg-slate-50"
                      />
                    </div>
                  </div>
                  
                  <div className="text-sm text-slate-600">
                    <p>Max Execution Days: {projectDates.totalExecutionDays} workdays</p>
                    <p>Max Buffer Days: {projectDates.totalBufferDays} workdays</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Team Assignments */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Team Assignments</CardTitle>
                    <CardDescription>Manage team member allocations and rates</CardDescription>
                  </div>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Add Person
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Role</TableHead>
                      <TableHead>Level</TableHead>
                      <TableHead>Rate/Day</TableHead>
                      <TableHead>Days</TableHead>
                      <TableHead>Buffer Days</TableHead>
                      <TableHead>Total Mandays</TableHead>
                      <TableHead>Total Price</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {assignments.map((assignment) => (
                      <TableRow key={assignment.id}>
                        <TableCell className="font-medium">{assignment.name}</TableCell>
                        <TableCell>{assignment.role}</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="text-xs">
                            {assignment.tier}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            value={assignment.dailyRate}
                            onChange={(e) => updateAssignment(assignment.id, 'dailyRate', parseFloat(e.target.value))}
                            className="w-24"
                          />
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            value={assignment.daysAllocated}
                            onChange={(e) => updateAssignment(assignment.id, 'daysAllocated', parseFloat(e.target.value))}
                            className="w-20"
                          />
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            value={assignment.bufferDays}
                            onChange={(e) => updateAssignment(assignment.id, 'bufferDays', parseFloat(e.target.value))}
                            className="w-20"
                            min="0"
                          />
                        </TableCell>
                        <TableCell className="font-mono">
                          {assignment.totalMandays}
                        </TableCell>
                        <TableCell className="font-mono">
                          {formatCurrency(assignment.totalPrice)}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleEditAssignment(assignment.id)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="text-red-600"
                              onClick={() => handleDeleteAssignment(assignment.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            {/* Holidays */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Public Holidays</CardTitle>
                    <CardDescription>Manage holidays that affect project timeline</CardDescription>
                  </div>
                  <Dialog open={showAddHoliday} onOpenChange={setShowAddHoliday}>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        Add Holiday
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Add Holiday</DialogTitle>
                        <DialogDescription>
                          Add a new holiday that will affect the project timeline
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="holidayName">Holiday Name</Label>
                          <Input
                            id="holidayName"
                            value={newHoliday.name}
                            onChange={(e) => setNewHoliday(prev => ({ ...prev, name: e.target.value }))}
                            placeholder="e.g., National Day"
                          />
                        </div>
                        <div>
                          <Label>Date</Label>
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button variant="outline" className="w-full justify-start text-left font-normal">
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {format(newHoliday.date, 'PPP')}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <Calendar
                                mode="single"
                                selected={newHoliday.date}
                                onSelect={(date) => date && setNewHoliday(prev => ({ ...prev, date }))}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                        </div>
                        <div>
                          <Label>Type</Label>
                          <Select 
                            value={newHoliday.type} 
                            onValueChange={(value: 'public' | 'company') => 
                              setNewHoliday(prev => ({ ...prev, type: value }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="public">Public Holiday</SelectItem>
                              <SelectItem value="company">Company Holiday</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      <DialogFooter>
                        <Button variant="outline" onClick={() => setShowAddHoliday(false)}>
                          Cancel
                        </Button>
                        <Button onClick={addHoliday} disabled={!newHoliday.name}>
                          Add Holiday
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Holiday Name</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {holidays.map((holiday) => (
                      <TableRow key={holiday.id}>
                        <TableCell className="font-medium">{holiday.name}</TableCell>
                        <TableCell>{format(holiday.date, 'MMM dd, yyyy')}</TableCell>
                        <TableCell>
                          <Badge variant={holiday.type === 'public' ? 'default' : 'secondary'}>
                            {holiday.type}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="text-red-600"
                            onClick={() => deleteHoliday(holiday.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            {/* Export Options */}
            <Card>
              <CardHeader>
                <CardTitle>Export Options</CardTitle>
                <CardDescription>Export project data in various formats</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Button variant="outline" className="h-20 flex flex-col">
                    <FileText className="h-6 w-6 mb-2" />
                    Export CSV
                  </Button>
                  <Button variant="outline" className="h-20 flex flex-col">
                    <FileText className="h-6 w-6 mb-2" />
                    Export XLSX
                  </Button>
                  <Button variant="outline" className="h-20 flex flex-col">
                    <FileText className="h-6 w-6 mb-2" />
                    Export PDF
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="gantt" className="space-y-6">
            <InteractiveGantt
              tasks={generateGanttTasks()}
              holidays={holidays}
              projectStart={project.startDate}
              projectEnd={projectDates.projectEndDate}
              onTaskUpdate={handleTaskUpdate}
              onTaskResize={handleTaskResize}
            />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
