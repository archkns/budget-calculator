import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';

// Function to generate Thai holidays for any year
function generateThaiHolidays(year: number) {
  return [
    // Fixed date holidays
    { name: "New Year's Day", date: `${year}-01-01`, type: 'public' },
    { name: "Chakri Memorial Day", date: `${year}-04-06`, type: 'public' },
    { name: "Songkran Festival", date: `${year}-04-13`, type: 'public' },
    { name: "Songkran Festival", date: `${year}-04-14`, type: 'public' },
    { name: "Songkran Festival", date: `${year}-04-15`, type: 'public' },
    { name: "Labour Day", date: `${year}-05-01`, type: 'public' },
    { name: "Coronation Day", date: `${year}-05-04`, type: 'public' },
    { name: "HM Queen's Birthday", date: `${year}-08-12`, type: 'public' },
    { name: "HM King's Birthday", date: `${year}-07-28`, type: 'public' },
    { name: "Chulalongkorn Day", date: `${year}-10-23`, type: 'public' },
    { name: "HM King's Birthday", date: `${year}-12-05`, type: 'public' },
    { name: "Constitution Day", date: `${year}-12-10`, type: 'public' },
    { name: "New Year's Eve", date: `${year}-12-31`, type: 'public' },
    
    // Variable date holidays (approximated - in real app, use lunar calendar calculations)
    { name: "Makha Bucha Day", date: `${year}-02-12`, type: 'public' },
    { name: "Visakha Bucha Day", date: `${year}-05-12`, type: 'public' },
    { name: "Royal Ploughing Ceremony", date: `${year}-05-19`, type: 'public' },
    { name: "Asanha Bucha Day", date: `${year}-07-10`, type: 'public' },
    { name: "Buddhist Lent Day", date: `${year}-07-11`, type: 'public' },
  ];
}

// Auto-generate holidays for current and next year
function getAutoGeneratedHolidays() {
  const currentYear = new Date().getFullYear();
  const nextYear = currentYear + 1;
  
  const currentYearHolidays = generateThaiHolidays(currentYear);
  const nextYearHolidays = generateThaiHolidays(nextYear);
  
  return [...currentYearHolidays, ...nextYearHolidays].map((holiday, index) => ({
    id: index + 1,
    name: holiday.name,
    date: holiday.date,
    type: holiday.type,
    project_id: null,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }));
}

// Static holidays + auto-generated ones
const baseHolidays = getAutoGeneratedHolidays();
const mockHolidays = [
  ...baseHolidays,
  // Add some project-specific holidays
  {
    id: baseHolidays.length + 1,
    name: 'Company Retreat',
    date: '2025-11-15',
    type: 'company',
    project_id: 1,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }
];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const projectId = searchParams.get('project_id');
    const format = searchParams.get('format'); // csv or pdf
    const year = searchParams.get('year');
    
    let filteredHolidays = mockHolidays;
    
    // Filter by year if specified
    if (year) {
      filteredHolidays = mockHolidays.filter(h => 
        h.date.startsWith(year)
      );
    }
    
    if (projectId) {
      // Return public holidays + project-specific holidays
      filteredHolidays = filteredHolidays.filter(h => 
        h.type === 'public' || h.project_id === parseInt(projectId)
      );
    }
    
    // Handle export formats
    if (format === 'csv') {
      const csvContent = [
        'Holiday Name,Date,Type',
        ...filteredHolidays.map(h => `"${h.name}","${h.date}","${h.type}"`)
      ].join('\n');
      
      return new NextResponse(csvContent, {
        headers: {
          'Content-Type': 'text/csv',
          'Content-Disposition': `attachment; filename="thai-holidays-${year || 'all'}.csv"`
        }
      });
    }
    
    if (format === 'pdf') {
      // Return structured data for PDF generation on frontend
      return NextResponse.json({
        holidays: filteredHolidays,
        metadata: {
          title: `Thai Public Holidays ${year || 'Calendar'}`,
          generatedAt: new Date().toISOString(),
          totalHolidays: filteredHolidays.length,
          year: year || 'All Years'
        }
      });
    }
    
    return NextResponse.json(filteredHolidays);
  } catch (error) {
    console.error('Error fetching holidays:', error);
    return NextResponse.json(
      { error: 'Failed to fetch holidays' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, date, type, project_id } = body;
    
    if (!name || !date || !type) {
      return NextResponse.json(
        { error: 'Name, date, and type are required' },
        { status: 400 }
      );
    }
    
    const newHoliday = {
      id: mockHolidays.length + 1,
      name,
      date,
      type,
      project_id: project_id || null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    mockHolidays.push(newHoliday);
    
    return NextResponse.json(newHoliday, { status: 201 });
  } catch (error) {
    console.error('Error creating holiday:', error);
    return NextResponse.json(
      { error: 'Failed to create holiday' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'Holiday ID is required' },
        { status: 400 }
      );
    }
    
    const holidayIndex = mockHolidays.findIndex(h => h.id === parseInt(id));
    
    if (holidayIndex === -1) {
      return NextResponse.json(
        { error: 'Holiday not found' },
        { status: 404 }
      );
    }
    
    mockHolidays.splice(holidayIndex, 1);
    
    return NextResponse.json({ message: 'Holiday deleted successfully' });
  } catch (error) {
    console.error('Error deleting holiday:', error);
    return NextResponse.json(
      { error: 'Failed to delete holiday' },
      { status: 500 }
    );
  }
}
